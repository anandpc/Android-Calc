import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.BasicText
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.unit.dp
import com.google.accompanist.pager.*
import kotlinx.coroutines.launch

@Composable
fun ScrollableRowWithPager(pages: List<String>) {
    val scrollState = rememberScrollState()
    val coroutineScope = rememberCoroutineScope()
    val pagerState = rememberPagerState()
    val itemWidths = remember { mutableStateListOf<Int>() }
    val rowWidth = remember { mutableStateOf(0) }

    // LaunchedEffect to center the item based on the selected page index
    LaunchedEffect(pagerState.currentPage) {
        coroutineScope.launch {
            scrollToCenterItem(scrollState, pagerState.currentPage, itemWidths, rowWidth.value)
        }
    }

    Column {
        Row(
            modifier = Modifier
                .horizontalScroll(scrollState)
                .onGloballyPositioned { coordinates ->
                    rowWidth.value = coordinates.size.width
                }
                .fillMaxWidth()
                .padding(8.dp)
        ) {
            pages.forEachIndexed { index, title ->
                Box(
                    modifier = Modifier
                        .onGloballyPositioned { coordinates ->
                            if (itemWidths.size > index) {
                                itemWidths[index] = coordinates.size.width
                            } else {
                                itemWidths.add(coordinates.size.width)
                            }
                        }
                        .padding(horizontal = 8.dp)
                        .clickable {
                            coroutineScope.launch {
                                pagerState.animateScrollToPage(index)
                            }
                        }
                ) {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.body1,
                        modifier = Modifier.background(Color.LightGray).padding(8.dp)
                    )
                }
            }
        }

        HorizontalPager(
            count = pages.size,
            state = pagerState,
            modifier = Modifier.fillMaxWidth()
        ) { page ->
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Text(text = "Content for ${pages[page]}", style = MaterialTheme.typography.h4)
            }
        }
    }
}

suspend fun scrollToCenterItem(
    scrollState: ScrollState,
    pageIndex: Int,
    itemWidths: List<Int>,
    rowWidth: Int
) {
    if (itemWidths.isEmpty() || pageIndex >= itemWidths.size || rowWidth == 0) return

    // Calculate the target scroll position to center the selected item
    val itemCenter = itemWidths.take(pageIndex).sum() + itemWidths[pageIndex] / 2
    val targetScrollPosition = itemCenter - rowWidth / 2

    scrollState.animateScrollTo(targetScrollPosition)
}

@Composable
fun MyApp() {
    val pages = listOf("Page 1", "Page 2", "Page 3", "Page 4")
    ScrollableRowWithPager(pages)
}